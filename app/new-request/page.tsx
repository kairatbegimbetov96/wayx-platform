// app/new-request/page.tsx
"use client";

import { useMemo, useState } from "react";
import {
  Truck,
  Plane,
  Ship,
  TrainFront,
  Send,
  Loader2,
  MapPin,
  ClipboardCheck,
  Sparkles,
  ThermometerSnowflake,
  Boxes,
  ShieldAlert,
  Landmark,
  MapPinned,
  Container,
  Factory,
  Building2,
  CalendarDays,
  Info,
  SlidersHorizontal,
  ChevronDown,
  ChevronUp,
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import RoutePreview from "@/components/RoutePreview";
import { auth, db } from "@/lib/firebase";
import { collection, addDoc, serverTimestamp } from "firebase/firestore";

/** –ö–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firestore */
const TYPE_MAP: Record<string, "auto" | "rail" | "air" | "sea" | "multi"> = {
  –ê–≤—Ç–æ: "auto",
  –ñ–î: "rail",
  –ê–≤–∏–∞: "air",
  –ú–æ—Ä–µ: "sea",
  –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è: "multi",
};

/** –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–æ–∫ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API */
const CITY_SUGGEST = [
  "–ê–ª–º–∞—Ç—ã",
  "–ê—Å—Ç–∞–Ω–∞",
  "–®—ã–º–∫–µ–Ω—Ç",
  "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞",
  "–ê—Ç—ã—Ä–∞—É",
  "–ê–∫—Ç–∞—É",
  "–ü–∞–≤–ª–æ–¥–∞—Ä",
  "–£—Ä–∞–ª—å—Å–∫",
  "–ö–æ—Å—Ç–∞–Ω–∞–π",
  "–¢–∞–ª–¥—ã–∫–æ—Ä–≥–∞–Ω",
  "–¢–∞—Ä–∞–∑",
  "–°–µ–º–µ–π",
  "–ö—ã–∑—ã–ª–æ—Ä–¥–∞",
  "–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫",
];
const RAIL_STATIONS = [
  "–ê–ª–º–∞—Ç—ã-1",
  "–ê–ª–º–∞—Ç—ã-2",
  "–ù—É—Ä-–°—É–ª—Ç–∞–Ω-1",
  "–®—ã–º–∫–µ–Ω—Ç",
  "–ê–∫—Ç–æ–≥–∞–π",
  "–î–æ—Å—Ç—ã–∫",
  "–ö–æ—Å—Ç–∞–Ω–∞–π",
  "–°–µ–º–µ–π",
];
const AIR_PORTS = ["ALA", "NQZ", "CIT", "KZO", "PLX", "DMB", "AKX", "SCO"]; // IATA
const SEA_PORTS = ["–ê–∫—Ç–∞—É", "–ö—É—Ä—ã–∫", "–ë–∞–∫—É", "–¢—É—Ä–∫–º–µ–Ω–±–∞—à–∏", "–ë–∞–Ω–¥–∞—Ä-–ê–±–±–∞—Å", "–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫"];
const CONTAINER_TYPES = ["20DC", "40DC", "40HC", "45HC", "20RF", "40RF"];

export default function NewRequestPage() {
  /** –í–µ—Ä—Ö–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞: –£–ü–†–û–©–Å–ù–ù–´–ô –ø–æ–∏—Å–∫ */
  const [transport, setTransport] = useState<keyof typeof TYPE_MAP | "">("");
  const [form, setForm] = useState({
    origin: "",
    destination: "",
    weight: "",
    description: "",
  });

  /** –ù–∏–∂–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞: –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–¥–∏–º–æ—Å—Ç–∏) */
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [advModeExtended, setAdvModeExtended] = useState(true); // true = —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ (10+), false = —É–ø—Ä–æ—â—ë–Ω–Ω—ã–µ (<=6)

  // –¢–∏–ø–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const [params, setParams] = useState<any>({
    // –ê–≤—Ç–æ
    auto_bodyType: "",
    auto_capacityTons: "",
    auto_tempControl: false,
    auto_loadingType: "",
    auto_adr: false,
    auto_palletized: false,
    auto_dimensions: "",
    auto_brand: "",

    // –ñ–î
    rail_stationFrom: "",
    rail_stationTo: "",
    rail_etsng: "",
    rail_gng: "",
    rail_wagonType: "",
    rail_wagonsCount: "",
    rail_transitStation: "",
    rail_dg: false,
    rail_customs: false,
    rail_insurance: false,

    // –ê–≤–∏–∞
    air_airportFrom: "",
    air_airportTo: "",
    air_chargeableWeight: "",
    air_volumeM3: "",
    air_commodityClass: "",
    air_dg: false,
    air_dimensions: "",
    air_priority: "",

    // –ú–æ—Ä–µ
    sea_portFrom: "",
    sea_portTo: "",
    sea_containerType: "",
    sea_containersCount: "",
    sea_incoterms: "",
    sea_readyDate: "",
    sea_shipType: "",
    sea_imo: "",

    // –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è
    multi_legs: "–ê–≤—Ç–æ + –ñ–î",
    multi_transshipments: "",
    multi_customs: false,
    multi_insurance: false,
    multi_notes: "",
    multi_incoterms: "",
  });

  const [routeInfo, setRouteInfo] = useState<{ distance: number; duration: string } | null>(null);
  const [loading, setLoading] = useState(false);
  const [saved, setSaved] = useState(false);

  const transportOptions = [
    { id: "–ê–≤—Ç–æ" as const, label: "–ê–≤—Ç–æ", icon: Truck, color: "from-blue-500 to-cyan-400" },
    { id: "–ñ–î" as const, label: "–ñ–î", icon: TrainFront, color: "from-green-500 to-emerald-400" },
    { id: "–ê–≤–∏–∞" as const, label: "–ê–≤–∏–∞", icon: Plane, color: "from-sky-500 to-indigo-400" },
    { id: "–ú–æ—Ä–µ" as const, label: "–ú–æ—Ä–µ", icon: Ship, color: "from-indigo-500 to-blue-500" },
    { id: "–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è" as const, label: "–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è", icon: Container, color: "from-amber-500 to-orange-400" },
  ];

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) =>
    setForm({ ...form, [e.target.name]: e.target.value });

  const setP = (name: string, value: any) => setParams((p: any) => ({ ...p, [name]: value }));

  /** –ü–æ–ª—è –¥–ª—è –Ω–∏–∂–Ω–µ–≥–æ –±–ª–æ–∫–∞: –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–∏–ø–∞ –∏ —Ä–µ–∂–∏–º–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–µ/—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ) */
  const advFields = useMemo(
    () => getFieldsByTransport(transport, advModeExtended),
    [transport, advModeExtended]
  );

  /** –ü–æ–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ –º–µ–Ω—è—é—Ç—Å—è –ø–æ –≤–∏–¥—É –ø–µ—Ä–µ–≤–æ–∑–∫–∏ */
  const route = getRouteByTransport(transport);

  // üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã (—Å–æ–∑–¥–∞—ë—Ç –∑–∞—è–≤–∫—É —Å –±–∞–∑–æ–≤—ã–º–∏ –∏, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!transport) return (window as any).toast?.("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏", "info");
    if (!form.origin || !form.destination)
      return (window as any).toast?.(`‚ùó –£–∫–∞–∂–∏—Ç–µ ${route.fromLabel.toLowerCase()} –∏ ${route.toLabel.toLowerCase()}`, "error");
    if (form.weight && Number.isNaN(Number(form.weight)))
      return (window as any).toast?.("‚ö†Ô∏è –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", "error");

    setLoading(true);
    setSaved(false);
    setRouteInfo(null);

    // üß≠ –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞ (UI-–æ—Ü–µ–Ω–∫–∞)
    setTimeout(async () => {
      const distance = Math.floor(Math.random() * 2000 + 300);
      const duration =
        transport === "–ê–≤–∏–∞"
          ? "1‚Äì2 –¥–Ω—è"
          : transport === "–ú–æ—Ä–µ"
          ? "10‚Äì15 –¥–Ω–µ–π"
          : transport === "–ñ–î"
          ? "5‚Äì7 –¥–Ω–µ–π"
          : transport === "–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è"
          ? "7‚Äì12 –¥–Ω–µ–π"
          : "3‚Äì5 –¥–Ω–µ–π";

      setRouteInfo({ distance, duration });

      try {
        const user = auth.currentUser;
        if (user) {
          await addDoc(collection(db, "requests"), {
            uid: user.uid,
            type: TYPE_MAP[transport], // 'auto' | 'rail' | ...
            transport, // —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≤–∏–¥
            base: {
              origin: form.origin.trim(),
              destination: form.destination.trim(),
              weightTons: form.weight ? Number(form.weight) : null,
              description: form.description?.trim() || "",
            },
            // –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–ª–æ–∫ –æ—Ç–∫—Ä—ã—Ç ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
            advanced: showAdvanced
              ? {
                  mode: advModeExtended ? "extended" : "simple",
                  params: buildParamsPayload(transport, advModeExtended, params),
                }
              : null,
            status: "pending",
            createdAt: serverTimestamp(),
          });
          setSaved(true);
          (window as any).toast?.("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", "success");
        } else {
          (window as any).toast?.("‚ö†Ô∏è –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "info");
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:", err);
        (window as any).toast?.("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏", "error");
      } finally {
        setLoading(false);
      }
    }, 600);
  };

  return (
    <div className="max-w-3xl mx-auto py-12 px-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <motion.h1
        className="text-3xl font-bold text-center text-blue-600 dark:text-blue-400 mb-8 flex items-center justify-center gap-2"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <Sparkles className="text-yellow-400" /> –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
      </motion.h1>

      {/* =================== –£–ü–†–û–©–Å–ù–ù–´–ô –ü–û–ò–°–ö (–≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—Ö—É) =================== */}
      <motion.form
        onSubmit={handleSubmit}
        className="bg-white dark:bg-gray-800 shadow-lg rounded-2xl p-6 sm:p-8 space-y-6 border border-gray-100 dark:border-gray-700 mb-6"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.05, duration: 0.4 }}
      >
        <Header title="–ë–∞–∑–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø–æ–∏—Å–∫)" subtitle="–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –Ω–∏–∂–µ." />

        {/* –ú–∞—Ä—à—Ä—É—Ç (–ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è —Å –∞–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏) */}
        <Section title="–ú–∞—Ä—à—Ä—É—Ç" subtitle={route.subtitle} icon={<MapPin className="w-4 h-4" />}>
          <div className="grid md:grid-cols-2 gap-6">
            <Input
              label={route.fromLabel}
              name="origin"
              placeholder={route.fromPh}
              icon={<MapPin className="w-4 h-4 text-blue-500" />}
              value={form.origin}
              onChange={handleChange}
              list={route.listId}
              required
            />
            <Input
              label={route.toLabel}
              name="destination"
              placeholder={route.toPh}
              icon={<MapPin className="w-4 h-4 text-blue-500" />}
              value={form.destination}
              onChange={handleChange}
              list={route.listId}
              required
            />
          </div>

          {/* datalist ‚Äî –∞–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–∫–∏ –±–µ–∑ API */}
          {route.listId === "cities" && <datalist id="cities">{CITY_SUGGEST.map((c) => <option value={c} key={c} />)}</datalist>}
          {route.listId === "railStations" && <datalist id="railStations">{RAIL_STATIONS.map((s) => <option value={s} key={s} />)}</datalist>}
          {route.listId === "airPorts" && <datalist id="airPorts">{AIR_PORTS.map((s) => <option value={s} key={s} />)}</datalist>}
          {route.listId === "seaPorts" && <datalist id="seaPorts">{SEA_PORTS.map((s) => <option value={s} key={s} />)}</datalist>}
        </Section>

        {/* –¢–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏ (–≤ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–º ‚Äî —Ç–æ–ª—å–∫–æ –≤—ã–±–æ—Ä —Ç–∏–ø–∞, –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤) */}
        <Section title="–¢–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏" subtitle="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ ‚Äî —Å—Ä–æ–∫/–º–∞—Ä—à—Ä—É—Ç —Ä–∞—Å—á—ë—Ç–Ω–æ –æ–±–Ω–æ–≤—è—Ç—Å—è">
          <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
            {transportOptions.map(({ id, label, icon: Icon, color }) => (
              <button
                key={id}
                type="button"
                onClick={() => setTransport(id)}
                className={`flex flex-col items-center justify-center border rounded-xl py-3 transition-all relative overflow-hidden group ${
                  transport === id ? "border-blue-600 scale-[1.03] shadow-lg" : "border-gray-300 dark:border-gray-700 hover:border-blue-400"
                }`}
              >
                <div className={`absolute inset-0 bg-gradient-to-r ${color} opacity-0 group-hover:opacity-10 transition-opacity duration-300`} />
                <Icon className={`h-6 w-6 mb-1 ${transport === id ? "text-blue-600 dark:text-blue-400" : "text-gray-500 dark:text-gray-300"}`} />
                <span className={`text-xs font-medium ${transport === id ? "text-blue-600 dark:text-blue-400" : "text-gray-700 dark:text-gray-200"}`}>{label}</span>
              </button>
            ))}
          </div>
        </Section>

        {/* –ì—Ä—É–∑ (–æ–±—â–∏–µ –ø–æ–ª—è) */}
        <Section title="–ì—Ä—É–∑" subtitle="–ë–∞–∑–æ–≤—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è, –≤–∏–¥–Ω—ã –≤–æ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö">
          <div className="grid md:grid-cols-2 gap-6">
            <Input label="–í–µ—Å (—Ç–æ–Ω–Ω)" name="weight" type="number" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 12" value={form.weight} onChange={handleChange} />
            <TextArea label="–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞" name="description" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..." value={form.description} onChange={handleChange} />
          </div>
        </Section>

        {/* –î–µ–π—Å—Ç–≤–∏—è (—Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É) */}
        <div className="text-center pt-2">
          <button
            type="submit"
            disabled={loading}
            className="inline-flex items-center justify-center bg-gradient-to-r from-blue-600 to-cyan-500 hover:from-blue-700 hover:to-cyan-600 text-white px-8 py-3 rounded-xl font-semibold shadow-md transition-all disabled:opacity-70"
          >
            {loading ? (
              <>
                <Loader2 className="animate-spin mr-2 h-5 w-5" /> –°–æ—Ö—Ä–∞–Ω—è–µ–º...
              </>
            ) : (
              <>
                <Send className="mr-2 h-5 w-5" /> –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
              </>
            )}
          </button>
        </div>
      </motion.form>

      {/* –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ */}
      <div className="flex justify-center mb-6">
        <button
          type="button"
          onClick={() => setShowAdvanced((v) => !v)}
          className="inline-flex items-center gap-2 px-5 py-3 rounded-xl border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-750 transition text-sm font-medium"
          aria-expanded={showAdvanced}
          aria-controls="advanced-panel"
        >
          <SlidersHorizontal className="w-4 h-4" />
          {showAdvanced ? "–°–∫—Ä—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" : "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"}
          {showAdvanced ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
        </button>
      </div>

      {/* =================== –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–û–ò–°–ö (—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –Ω–∏–∂–µ) =================== */}
      <AnimatePresence initial={false}>
        {showAdvanced && (
          <motion.div
            id="advanced-panel"
            initial={{ opacity: 0, y: 16 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 8 }}
            transition={{ duration: 0.35 }}
            className="bg-white dark:bg-gray-800 shadow-lg rounded-2xl p-6 sm:p-8 space-y-6 border border-gray-100 dark:border-gray-700"
          >
            <Header title="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" subtitle="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ —Ç–∏–ø—É –ø–µ—Ä–µ–≤–æ–∑–∫–∏ ‚Äî –¥–ª—è —Ç–æ—á–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –∏ –ø–æ–¥–±–æ—Ä–∞" />

            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ —Ç–µ–∫—É—â–µ–º —Ç–∏–ø–µ */}
            <Section
              title="–¢–µ–∫—É—â–∏–π —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏"
              subtitle={transport ? "–ü–æ–ª—è –Ω–∏–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø" : "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –≤ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–º –±–ª–æ–∫–µ"}
              icon={<Info className="w-4 h-4" />}
              dense
            >
              <div className="text-sm text-gray-700 dark:text-gray-300">
                <span className="font-medium">–¢–∏–ø: </span>
                {transport || "‚Äî"}
              </div>
            </Section>

            {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –≤–Ω—É—Ç—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ */}
            <div className="flex items-center justify-center gap-2">
              <button
                type="button"
                onClick={() => setAdvModeExtended(false)}
                className={`px-4 py-2 rounded-lg border transition ${
                  !advModeExtended ? "bg-blue-600 text-white border-blue-600" : "bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-700 text-gray-700 dark:text-gray-200"
                }`}
              >
                –£–ø—Ä–æ—â—ë–Ω–Ω—ã–µ –ø–æ–ª—è
              </button>
              <button
                type="button"
                onClick={() => setAdvModeExtended(true)}
                className={`px-4 py-2 rounded-lg border transition ${
                  advModeExtended ? "bg-blue-600 text-white border-blue-600" : "bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-700 text-gray-700 dark:text-gray-200"
                }`}
              >
                –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è
              </button>
            </div>

            {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –ø–æ —Ç–∏–ø—É –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ */}
            <Section title={`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${transport || "‚Äî"}`} subtitle={advModeExtended ? "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ" : "–£–ø—Ä–æ—â—ë–Ω–Ω—ã–µ"} icon={<SlidersHorizontal className="w-4 h-4" />}>
              {transport ? (
                <>
                  <div className="grid md:grid-cols-2 gap-6">
                    {advFields.map((f) =>
                      f.kind === "textarea" ? (
                        <TextArea key={f.name} label={f.label} name={f.name} placeholder={f.placeholder} value={params[f.name] ?? ""} onChange={(e: any) => setP(f.name, e.target.value)} />
                      ) : f.kind === "checkbox" ? (
                        <Checkbox key={f.name} label={f.label} checked={!!params[f.name]} onChange={(v) => setP(f.name, v)} hint={f.hint} />
                      ) : (
                        <Input
                          key={f.name}
                          label={f.label}
                          placeholder={f.placeholder}
                          value={params[f.name] ?? ""}
                          onChange={(e: any) => setP(f.name, e.target.value)}
                          type={f.type || "text"}
                          icon={f.icon}
                          list={f.listId}
                        />
                      )
                    )}
                  </div>

                  {/* –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ç–∏–ø–∞–º */}
                  <div className="text-xs text-gray-500 dark:text-gray-400 flex flex-wrap gap-4 pt-2">
                    {transport === "–ê–≤—Ç–æ" && (
                      <>
                        <Hint icon={<Boxes className="w-3.5 h-3.5" />} text="–¢–∏–ø –∫—É–∑–æ–≤–∞ (—Ç–µ–Ω—Ç, —Ä–µ—Ñ, –∏–∑–æ—Ç–µ—Ä–º, –±–æ—Ä—Ç)" />
                        <Hint icon={<ThermometerSnowflake className="w-3.5 h-3.5" />} text="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å–∫–æ—Ä–æ–ø–æ—Ä—Ç–∞" />
                        <Hint icon={<ShieldAlert className="w-3.5 h-3.5" />} text="ADR ‚Äî –æ–ø–∞—Å–Ω—ã–µ –≥—Ä—É–∑—ã" />
                      </>
                    )}
                    {transport === "–ñ–î" && (
                      <>
                        <Hint icon={<Landmark className="w-3.5 h-3.5" />} text="–ï–¢–°–ù–ì/–ì–ù–ì ‚Äî –∫–æ–¥ –≥—Ä—É–∑–∞" />
                        <Hint icon={<Building2 className="w-3.5 h-3.5" />} text="–¢–∏–ø –≤–∞–≥–æ–Ω–∞: –ø–æ–ª—É–≤–∞–≥–æ–Ω, –∫—Ä—ã—Ç—ã–π, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞" />
                      </>
                    )}
                    {transport === "–ê–≤–∏–∞" && (
                      <>
                        <Hint icon={<Factory className="w-3.5 h-3.5" />} text="–ö–ª–∞—Å—Å –≥—Ä—É–∑–∞ (IATA Commodity Class)" />
                        <Hint icon={<ShieldAlert className="w-3.5 h-3.5" />} text="DG ‚Äî Dangerous Goods" />
                      </>
                    )}
                    {transport === "–ú–æ—Ä–µ" && (
                      <>
                        <Hint icon={<Container className="w-3.5 h-3.5" />} text="–¢–∏–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (20DC, 40HC –∏ —Ç.–¥.)" />
                        <Hint icon={<CalendarDays className="w-3.5 h-3.5" />} text="–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≥—Ä—É–∑–∞, Incoterms" />
                      </>
                    )}
                    {transport === "–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è" && (
                      <>
                        <Hint icon={<MapPinned className="w-3.5 h-3.5" />} text="–ü—É–Ω–∫—Ç—ã –ø–µ—Ä–µ–≥—Ä—É–∑–∞ –∏ –ø–ª–µ—á–∏" />
                        <Hint icon={<ShieldAlert className="w-3.5 h-3.5" />} text="–¢–∞–º–æ–∂–Ω—è / –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ" />
                      </>
                    )}
                  </div>

                  {/* datalist –¥–ª—è –ø—Ä–æ—Ñ. –ø–æ–ª–µ–π */}
                  <datalist id="railStations">{RAIL_STATIONS.map((s) => <option value={s} key={s} />)}</datalist>
                  <datalist id="airPorts">{AIR_PORTS.map((s) => <option value={s} key={s} />)}</datalist>
                  <datalist id="seaPorts">{SEA_PORTS.map((s) => <option value={s} key={s} />)}</datalist>
                  <datalist id="containerTypes">{CONTAINER_TYPES.map((s) => <option value={s} key={s} />)}</datalist>
                </>
              ) : (
                <div className="text-sm text-gray-500 dark:text-gray-400">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º –±–ª–æ–∫–µ.</div>
              )}
            </Section>
          </motion.div>
        )}
      </AnimatePresence>

      {/* üìä –ò—Ç–æ–≥–∏ –º–∞—Ä—à—Ä—É—Ç–∞ */}
      {routeInfo && (
        <motion.div
          className="mt-10 bg-blue-50 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-800 rounded-2xl p-6 shadow-md text-center"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          <h2 className="text-xl font-semibold mb-4 text-blue-600 dark:text-blue-400">–ò—Ç–æ–≥–∏ –º–∞—Ä—à—Ä—É—Ç–∞</h2>
          <div className="text-gray-700 dark:text-gray-300 text-lg space-y-1">
            <p>
              –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: <strong>{routeInfo.distance} –∫–º</strong>
            </p>
            <p>
              –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: <strong>{routeInfo.duration}</strong>
            </p>
          </div>

          <RoutePreview origin={form.origin} destination={form.destination} transport={transport} />

          {saved && (
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="mt-6 text-green-600 dark:text-green-400 font-semibold flex items-center justify-center gap-2">
              <ClipboardCheck className="h-5 w-5" /> –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!
            </motion.div>
          )}
        </motion.div>
      )}
    </div>
  );
}

/* ==================== –õ–û–ì–ò–ö–ê –ü–û–õ–ï–ô –ü–û –¢–ò–ü–ê–ú ==================== */

type Field =
  | { name: string; label: string; placeholder?: string; kind?: "input"; type?: string; icon?: JSX.Element; listId?: string }
  | { name: string; label: string; placeholder?: string; kind: "textarea" }
  | { name: string; label: string; kind: "checkbox"; hint?: string };

function getFieldsByTransport(transport: string | "", extended: boolean): Field[] {
  if (!transport) return [];

  if (transport === "–ê–≤—Ç–æ") {
    return extended
      ? [
          { name: "auto_bodyType", label: "–¢–∏–ø –∫—É–∑–æ–≤–∞ (—Ç–µ–Ω—Ç/—Ä–µ—Ñ/–∏–∑–æ/–±–æ—Ä—Ç)" },
          { name: "auto_capacityTons", label: "–ì—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω–æ—Å—Ç—å, —Ç", type: "number", icon: <Boxes className="w-4 h-4 text-blue-500" /> },
          { name: "auto_dimensions", label: "–ì–∞–±–∞—Ä–∏—Ç—ã (–î√ó–®√ó–í), –º" },
          { name: "auto_loadingType", label: "–ü–æ–≥—Ä—É–∑–∫–∞/–†–∞–∑–≥—Ä—É–∑–∫–∞ (–≤–µ—Ä—Ö/–±–æ–∫/–∑–∞–¥)" },
          { name: "auto_tempControl", label: "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–∂–∏–º", kind: "checkbox", hint: "–¥–ª—è —Å–∫–æ—Ä–æ–ø–æ—Ä—Ç—è—â–∏—Ö—Å—è" },
          { name: "auto_adr", label: "–û–ø–∞—Å–Ω—ã–π –≥—Ä—É–∑ (ADR)", kind: "checkbox" },
          { name: "auto_palletized", label: "–ù–∞ –ø–æ–¥–¥–æ–Ω–∞—Ö", kind: "checkbox" },
          { name: "auto_brand", label: "–ú–∞—Ä–∫–∞/—Ç–∏–ø –¢–° (–æ–ø—Ü.)" },
        ]
      : [
          { name: "auto_bodyType", label: "–¢–∏–ø –∫—É–∑–æ–≤–∞ (—Ç–µ–Ω—Ç/—Ä–µ—Ñ/–∏–∑–æ/–±–æ—Ä—Ç)" },
          { name: "auto_capacityTons", label: "–ì—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω–æ—Å—Ç—å, —Ç", type: "number" },
          { name: "auto_loadingType", label: "–ü–æ–≥—Ä—É–∑–∫–∞ (–≤–µ—Ä—Ö/–±–æ–∫/–∑–∞–¥)" },
          { name: "auto_tempControl", label: "–¢–µ–º–ø. —Ä–µ–∂–∏–º", kind: "checkbox" },
          { name: "auto_adr", label: "ADR", kind: "checkbox" },
        ];
  }

  if (transport === "–ñ–î") {
    return extended
      ? [
          { name: "rail_stationFrom", label: "–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ï–°–†/–∫–æ–¥)", listId: "railStations" },
          { name: "rail_stationTo", label: "–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–ï–°–†/–∫–æ–¥)", listId: "railStations" },
          { name: "rail_etsng", label: "–ö–æ–¥ –ï–¢–°–ù–ì" },
          { name: "rail_gng", label: "–ö–æ–¥ –ì–ù–ì" },
          { name: "rail_wagonType", label: "–¢–∏–ø –≤–∞–≥–æ–Ω–∞ (–ø–æ–ª—É–≤–∞–≥–æ–Ω/–∫—Ä—ã—Ç—ã–π/–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞)" },
          { name: "rail_wagonsCount", label: "–ö–æ–ª-–≤–æ –≤–∞–≥–æ–Ω–æ–≤", type: "number" },
          { name: "rail_transitStation", label: "–°—Ç–∞–Ω—Ü–∏—è –ø–µ—Ä–µ–≤–∞–ª–∫–∏ (–æ–ø—Ü.)", listId: "railStations" },
          { name: "rail_dg", label: "–û–ø–∞—Å–Ω—ã–π –≥—Ä—É–∑", kind: "checkbox" },
          { name: "rail_customs", label: "–¢–∞–º–æ–∂–Ω—è", kind: "checkbox" },
          { name: "rail_insurance", label: "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", kind: "checkbox" },
        ]
      : [
          { name: "rail_stationFrom", label: "–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", listId: "railStations" },
          { name: "rail_stationTo", label: "–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", listId: "railStations" },
          { name: "rail_etsng", label: "–ö–æ–¥ –ï–¢–°–ù–ì" },
          { name: "rail_gng", label: "–ö–æ–¥ –ì–ù–ì" },
          { name: "rail_wagonType", label: "–¢–∏–ø –≤–∞–≥–æ–Ω–∞" },
          { name: "rail_wagonsCount", label: "–ö–æ–ª-–≤–æ –≤–∞–≥–æ–Ω–æ–≤", type: "number" },
        ];
  }

  if (transport === "–ê–≤–∏–∞") {
    return extended
      ? [
          { name: "air_airportFrom", label: "–ê—ç—Ä–æ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (IATA)", listId: "airPorts" },
          { name: "air_airportTo", label: "–ê—ç—Ä–æ–ø–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (IATA)", listId: "airPorts" },
          { name: "air_chargeableWeight", label: "–†–∞—Å—á—ë—Ç–Ω—ã–π –≤–µ—Å (CW), –∫–≥", type: "number" },
          { name: "air_volumeM3", label: "–û–±—ä—ë–º, –º¬≥", type: "number" },
          { name: "air_commodityClass", label: "–ö–ª–∞—Å—Å –≥—Ä—É–∑–∞ (IATA)" },
          { name: "air_dimensions", label: "–ì–∞–±–∞—Ä–∏—Ç—ã (–î√ó–®√ó–í), —Å–º" },
          { name: "air_priority", label: "–°—Ä–æ—á–Ω–æ—Å—Ç—å (Normal/Priority)" },
          { name: "air_dg", label: "–û–ø–∞—Å–Ω—ã–π –≥—Ä—É–∑ (DG)", kind: "checkbox" },
        ]
      : [
          { name: "air_airportFrom", label: "–ê—ç—Ä–æ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (IATA)", listId: "airPorts" },
          { name: "air_airportTo", label: "–ê—ç—Ä–æ–ø–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (IATA)", listId: "airPorts" },
          { name: "air_chargeableWeight", label: "–í–µ—Å, –∫–≥", type: "number" },
          { name: "air_volumeM3", label: "–û–±—ä—ë–º, –º¬≥", type: "number" },
          { name: "air_dg", label: "DG", kind: "checkbox" },
        ];
  }

  if (transport === "–ú–æ—Ä–µ") {
    return extended
      ? [
          { name: "sea_portFrom", label: "–ü–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", listId: "seaPorts" },
          { name: "sea_portTo", label: "–ü–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", listId: "seaPorts" },
          { name: "sea_containerType", label: "–¢–∏–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞", listId: "containerTypes" },
          { name: "sea_containersCount", label: "–ö–æ–ª-–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", type: "number" },
          { name: "sea_incoterms", label: "–ò–Ω–∫–æ—Ç–µ—Ä–º—Å (FOB/CIF/DDP...)" },
          { name: "sea_readyDate", label: "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≥—Ä—É–∑–∞ (–¥–∞—Ç–∞, –æ–ø—Ü.)", type: "date" },
          { name: "sea_shipType", label: "–¢–∏–ø —Å—É–¥–Ω–∞ (–æ–ø—Ü.)" },
          { name: "sea_imo", label: "IMO-–∫–æ–¥ (–æ–ø—Ü.)" },
        ]
      : [
          { name: "sea_portFrom", label: "–ü–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", listId: "seaPorts" },
          { name: "sea_portTo", label: "–ü–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", listId: "seaPorts" },
          { name: "sea_containerType", label: "–¢–∏–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞", listId: "containerTypes" },
          { name: "sea_containersCount", label: "–ö–æ–ª-–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", type: "number" },
          { name: "sea_incoterms", label: "–ò–Ω–∫–æ—Ç–µ—Ä–º—Å (–æ–ø—Ü.)" },
        ];
  }

  // –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è
  return extended
    ? [
        { name: "multi_legs", label: "–ú–∞—Ä—à—Ä—É—Ç/–ø–ª–µ—á–∏ (–ø—Ä–∏–º–µ—Ä: –ê–≤—Ç–æ‚Üí–ñ–î‚Üí–ú–æ—Ä–µ)" },
        { name: "multi_transshipments", label: "–ü—É–Ω–∫—Ç—ã –ø–µ—Ä–µ–≥—Ä—É–∑–∞" },
        { name: "multi_incoterms", label: "–ò–Ω–∫–æ—Ç–µ—Ä–º—Å (–æ–ø—Ü.)" },
        { name: "multi_customs", label: "–¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", kind: "checkbox" },
        { name: "multi_insurance", label: "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", kind: "checkbox" },
        { name: "multi_notes", label: "–ó–∞–º–µ—Ç–∫–∏ –ø–æ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ", kind: "textarea" },
      ]
    : [
        { name: "multi_legs", label: "–°—Ö–µ–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê–≤—Ç–æ + –ñ–î)" },
        { name: "multi_transshipments", label: "–ü—É–Ω–∫—Ç—ã –ø–µ—Ä–µ–≥—Ä—É–∑–∞ (–æ–ø—Ü.)" },
        { name: "multi_customs", label: "–¢–∞–º–æ–∂–Ω—è", kind: "checkbox" },
        { name: "multi_insurance", label: "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", kind: "checkbox" },
      ];
}

/** –ú–∞—Ä—à—Ä—É—Ç–Ω—ã–µ –ø–æ–ª—è/–ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞ */
function getRouteByTransport(transport: string | ""): {
  fromLabel: string;
  toLabel: string;
  fromPh: string;
  toPh: string;
  listId: "cities" | "railStations" | "airPorts" | "seaPorts";
  subtitle: string;
} {
  switch (transport) {
    case "–ñ–î":
      return {
        fromLabel: "–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        toLabel: "–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
        fromPh: "–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–ª–º–∞—Ç—ã-1",
        toPh: "–ù–∞–ø—Ä–∏–º–µ—Ä: –ù—É—Ä-–°—É–ª—Ç–∞–Ω-1",
        listId: "railStations",
        subtitle: "–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ (–ï–°–†/–Ω–∞–∑–≤–∞–Ω–∏–µ)",
      };
    case "–ê–≤–∏–∞":
      return {
        fromLabel: "–ê—ç—Ä–æ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (IATA)",
        toLabel: "–ê—ç—Ä–æ–ø–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (IATA)",
        fromPh: "–ù–∞–ø—Ä–∏–º–µ—Ä: ALA",
        toPh: "–ù–∞–ø—Ä–∏–º–µ—Ä: NQZ",
        listId: "airPorts",
        subtitle: "–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥—ã IATA (–Ω–∞–ø—Ä–∏–º–µ—Ä, ALA, NQZ)",
      };
    case "–ú–æ—Ä–µ":
      return {
        fromLabel: "–ü–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        toLabel: "–ü–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
        fromPh: "–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–∫—Ç–∞—É",
        toPh: "–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–∞–∫—É",
        listId: "seaPorts",
        subtitle: "–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç—ã (–ö–∞—Å–ø–∏–π –∏ –¥–∞–ª–µ–µ)",
      };
    // –ê–≤—Ç–æ –∏ –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è ‚Äî –≥–æ—Ä–æ–¥–∞/–∞–¥—Ä–µ—Å–∞
    default:
      return {
        fromLabel: "–û—Ç–∫—É–¥–∞ (–≥–æ—Ä–æ–¥/–∞–¥—Ä–µ—Å)",
        toLabel: "–ö—É–¥–∞ (–≥–æ—Ä–æ–¥/–∞–¥—Ä–µ—Å)",
        fromPh: "–ê–ª–º–∞—Ç—ã, —É–ª. ...",
        toPh: "–ê—Å—Ç–∞–Ω–∞, —É–ª. ...",
        listId: "cities",
        subtitle: "–£–∫–∞–∂–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
      };
  }
}

/** –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Firestore */
function buildParamsPayload(transport: string, extended: boolean, all: any) {
  const names = getFieldsByTransport(transport, extended).map((f) => f.name);
  const payload: Record<string, any> = {};
  for (const n of names) payload[n] = all[n] ?? (typeof all[n] === "boolean" ? false : "");
  return payload;
}

/* ==================== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï UI-–ö–û–ú–ü–û–ù–ï–ù–¢–´ ==================== */

function Header({ title, subtitle }: { title: string; subtitle?: string }) {
  return (
    <div className="mb-2">
      <h2 className="text-lg font-semibold">{title}</h2>
      {subtitle ? <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">{subtitle}</p> : null}
    </div>
  );
}

function Section({
  title,
  subtitle,
  icon,
  children,
  dense,
}: {
  title: string;
  subtitle?: string;
  icon?: JSX.Element;
  children: React.ReactNode;
  dense?: boolean;
}) {
  return (
    <div className={`rounded-2xl border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 shadow-sm ${dense ? "p-5" : "p-6"}`}>
      <div className="flex items-center gap-2 mb-3">
        {icon ? <div className="text-blue-600 dark:text-blue-400">{icon}</div> : null}
        <h3 className="text-base font-semibold">{title}</h3>
      </div>
      {subtitle ? <p className="text-xs text-gray-500 dark:text-gray-400 mb-4">{subtitle}</p> : null}
      {children}
    </div>
  );
}

function Hint({ icon, text }: { icon: JSX.Element; text: string }) {
  return (
    <span className="inline-flex items-center gap-1">
      {icon}
      {text}
    </span>
  );
}

function Input({ label, icon, ...props }: any) {
  return (
    <div>
      <label className="block text-sm font-medium mb-1">{label}</label>
      <div className="relative">
        {icon && <div className="absolute left-3 top-2.5">{icon}</div>}
        <input
          {...props}
          className={`w-full border border-gray-300 dark:border-gray-700 rounded-lg ${icon ? "pl-9" : "pl-4"} pr-4 py-2 bg-transparent focus:ring-2 focus:ring-blue-500 focus:outline-none`}
        />
      </div>
    </div>
  );
}

function TextArea(props: any) {
  return (
    <div className="md:col-span-2">
      <label className="block text-sm font-medium mb-1">{props.label}</label>
      <textarea
        {...props}
        className="w-full border border-gray-300 dark:border-gray-700 rounded-lg px-4 py-2 bg-transparent focus:ring-2 focus:ring-blue-500 h-24 focus:outline-none"
      />
    </div>
  );
}

function Checkbox({
  label,
  checked,
  onChange,
  hint,
}: {
  label: string;
  checked: boolean;
  onChange: (v: boolean) => void;
  hint?: string;
}) {
  return (
    <label className="flex items-start gap-3 cursor-pointer select-none">
      <input
        type="checkbox"
        checked={checked}
        onChange={(e) => onChange(e.target.checked)}
        className="mt-1 h-4 w-4 rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
      />
      <span className="text-sm">
        <span className="font-medium">{label}</span>
        {hint ? <span className="block text-xs text-gray-500 dark:text-gray-400">{hint}</span> : null}
      </span>
    </label>
  );
}
