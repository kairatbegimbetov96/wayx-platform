// app/orders/new/page.tsx
"use client";

import { useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { PlusCircle, ArrowLeft, Loader2, ChevronDown, Train, Plane, Ship, Truck } from "lucide-react";
import { createAuction } from "@/lib/auctions";
import { auth } from "@/lib/firebase";
import { useToast } from "@/components/ToastProvider";
import CityAutocomplete from "@/components/CityAutocomplete";
import RailStationAutocomplete from "@/components/RailStationAutocomplete";

type Transport = "auto" | "rail" | "air" | "sea" | "multimodal";

export default function NewOrderPage() {
  const router = useRouter();
  const { toast } = useToast();

  const [loading, setLoading] = useState(false);
  const [expanded, setExpanded] = useState(false);
  const [mode, setMode] = useState<Transport>("auto");

  const [form, setForm] = useState({
    title: "",
    description: "",
    price: "",
    currency: "KZT",

    // –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞)
    originCity: "",
    destinationCity: "",

    // rail-—Å—Ç–∞–Ω—Ü–∏–∏
    originStation: "",
    destinationStation: "",

    // —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ
    weightKg: "",
    volumeM3: "",
    lengthM: "",
    widthM: "",
    heightM: "",
    pickupDate: "",
    bodyType: "",      // —Ç–∏–ø –∫—É–∑–æ–≤–∞/–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    notes: "",         // –¥–æ–ø. –ø–æ–∂–µ–ª–∞–Ω–∏—è
  });

  const set = (k: string, v: string) => setForm((p) => ({ ...p, [k]: v }));

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const user = auth.currentUser;
    if (!user) {
      toast({ type: "warning", title: "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥", description: "–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É." });
      router.push("/auth/login");
      return;
    }

    if (!form.title || !form.price) {
      toast({ type: "error", title: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—è", description: "–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã." });
      return;
    }

    // –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    if (mode === "rail") {
      if (!form.originStation || !form.destinationStation) {
        toast({ type: "error", title: "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç–∞–Ω—Ü–∏–∏", description: "–î–ª—è –ñ–î –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è." });
        return;
      }
    } else {
      if (!form.originCity || !form.destinationCity) {
        toast({ type: "error", title: "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥–∞", description: "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è." });
        return;
      }
    }

    setLoading(true);
    try {
      // –°–≤–µ–¥—ë–º –≤ –µ–¥–∏–Ω—ã–π payload –¥–ª—è createAuction (–Ω–∞—à–∞ –æ–±—â–∞—è –º–æ–¥–µ–ª—å auctions)
      const origin = mode === "rail" ? form.originStation : form.originCity;
      const destination = mode === "rail" ? form.destinationStation : form.destinationCity;

     await createAuction({
  title: form.title.trim(),
  description: buildDescription(mode, form),
  origin,
  destination,
  price: Number(form.price),
  currency: form.currency,
  createdBy: user.email || "unknown@wayx.kz",
  status: "open",
  transport: mode, // üîπ –î–æ–±–∞–≤–ª–µ–Ω–æ!
});


      toast({ type: "success", title: "–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞", description: "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ WayX." });
      router.push("/market"); // –∏–ª–∏ /auctions, –µ—Å–ª–∏ —É —Ç–µ–±—è —Ç–∞–∫
    } catch (err: any) {
      console.error(err);
      toast({ type: "error", title: "–û—à–∏–±–∫–∞", description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É." });
    } finally {
      setLoading(false);
    }
  };

  return (
    <section className="max-w-3xl mx-auto py-16 px-6">
      {/* –ù–∞–∑–∞–¥ */}
      <div className="flex items-center gap-2 mb-6">
        <Link href="/market" className="flex items-center gap-2 text-slate-600 hover:text-blue-600 dark:text-slate-400 dark:hover:text-sky-400 transition">
          <ArrowLeft className="w-4 h-4" /> –ù–∞–∑–∞–¥
        </Link>
      </div>

      <h1 className="text-3xl font-bold mb-6 flex items-center gap-2 text-blue-600 dark:text-sky-400">
        <PlusCircle className="w-6 h-6" /> –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
      </h1>

      <form onSubmit={handleSubmit} className="space-y-6 bg-white/70 dark:bg-slate-900/70 p-6 rounded-2xl border border-slate-200 dark:border-slate-700 shadow backdrop-blur">
        {/* –í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ */}
        <TransportSelector value={mode} onChange={setMode} />

        {/* –ë–ª–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        {mode === "rail" ? (
          <div className="grid md:grid-cols-2 gap-4">
            <RailStationAutocomplete
              label="–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–ª–º–∞—Ç—ã-1"
              value={form.originStation}
              onChange={(v) => set("originStation", v)}
            />
            <RailStationAutocomplete
              label="–°—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–±—ã—Ç–∏—è"
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù—É—Ä-–°—É–ª—Ç–∞–Ω-1"
              value={form.destinationStation}
              onChange={(v) => set("destinationStation", v)}
            />
          </div>
        ) : (
          <div className="grid md:grid-cols-2 gap-4">
            <CityAutocomplete
              label="–û—Ç–∫—É–¥–∞ (–≥–æ—Ä–æ–¥)"
              placeholder="–ê–ª–º–∞—Ç—ã"
              value={form.originCity}
              onChange={(v) => set("originCity", v)}
            />
            <CityAutocomplete
              label="–ö—É–¥–∞ (–≥–æ—Ä–æ–¥)"
              placeholder="–ê—Å—Ç–∞–Ω–∞"
              value={form.destinationCity}
              onChange={(v) => set("destinationCity", v)}
            />
          </div>
        )}

        {/* –ù–∞–∑–≤–∞–Ω–∏–µ + –æ–ø–∏—Å–∞–Ω–∏–µ */}
        <div className="space-y-4">
          <input
            name="title"
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ä–µ–≤–æ–∑–∫–∞ –º–µ–±–µ–ª–∏)"
            required
            className="w-full p-3 border rounded-xl bg-white dark:bg-slate-800 text-slate-900 dark:text-slate-100 focus:ring-2 focus:ring-blue-500 outline-none"
            onChange={(e) => set("title", e.target.value)}
          />
          <textarea
            name="description"
            placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—Ö–∞—Ä–∞–∫—Ç–µ—Ä –≥—Ä—É–∑–∞, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏)"
            rows={3}
            className="w-full p-3 border rounded-xl bg-white dark:bg-slate-800 text-slate-900 dark:text-slate-100 focus:ring-2 focus:ring-blue-500 outline-none"
            onChange={(e) => set("description", e.target.value)}
          />
        </div>

        {/* –¶–µ–Ω–∞/–≤–∞–ª—é—Ç–∞ */}
        <div className="grid grid-cols-2 gap-4">
          <input
            name="price"
            type="number"
            min="0"
            placeholder="–ë—é–¥–∂–µ—Ç / –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞"
            required
            className="w-full p-3 border rounded-xl bg-white dark:bg-slate-800 text-slate-900 dark:text-slate-100 focus:ring-2 focus:ring-blue-500 outline-none"
            onChange={(e) => set("price", e.target.value)}
          />
          <select
            name="currency"
            value={form.currency}
            className="w-full p-3 border rounded-xl bg-white dark:bg-slate-800 text-slate-900 dark:text-slate-100 focus:ring-2 focus:ring-blue-500 outline-none"
            onChange={(e) => set("currency", e.target.value)}
          >
            <option value="KZT">KZT (‚Ç∏)</option>
            <option value="USD">USD ($)</option>
            <option value="EUR">EUR (‚Ç¨)</option>
          </select>
        </div>

        {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è */}
        <div className="border-t border-slate-200 dark:border-slate-800 pt-4">
          <button
            type="button"
            onClick={() => setExpanded((v) => !v)}
            className="inline-flex items-center gap-2 text-sm text-blue-600 dark:text-sky-400 hover:underline"
          >
            –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            <ChevronDown className={`w-4 h-4 transition ${expanded ? "rotate-180" : ""}`} />
          </button>

          {expanded && (
            <div className="mt-4 grid md:grid-cols-3 gap-4">
              <input
                placeholder="–í–µ—Å, –∫–≥"
                inputMode="numeric"
                className="p-3 border rounded-xl bg-white dark:bg-slate-800"
                onChange={(e) => set("weightKg", e.target.value)}
              />
              <input
                placeholder="–û–±—ä—ë–º, –º¬≥"
                inputMode="numeric"
                className="p-3 border rounded-xl bg-white dark:bg-slate-800"
                onChange={(e) => set("volumeM3", e.target.value)}
              />
              <input
                placeholder="–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏"
                type="date"
                className="p-3 border rounded-xl bg-white dark:bg-slate-800"
                onChange={(e) => set("pickupDate", e.target.value)}
              />

              <input
                placeholder="–î–ª–∏–Ω–∞, –º"
                inputMode="numeric"
                className="p-3 border rounded-xl bg-white dark:bg-slate-800"
                onChange={(e) => set("lengthM", e.target.value)}
              />
              <input
                placeholder="–®–∏—Ä–∏–Ω–∞, –º"
                inputMode="numeric"
                className="p-3 border rounded-xl bg-white dark:bg-slate-800"
                onChange={(e) => set("widthM", e.target.value)}
              />
              <input
                placeholder="–í—ã—Å–æ—Ç–∞, –º"
                inputMode="numeric"
                className="p-3 border rounded-xl bg-white dark:bg-slate-800"
                onChange={(e) => set("heightM", e.target.value)}
              />

              <input
                placeholder={mode === "sea" ? "–¢–∏–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (20DV/40HC‚Ä¶)" : mode === "auto" ? "–¢–∏–ø –∫—É–∑–æ–≤–∞ (—Ç–µ–Ω—Ç/—Ä–µ—Ñ/–∏–∑–æ—Ç–µ—Ä–º‚Ä¶)" : "–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"}
                className="p-3 border rounded-xl bg-white dark:bg-slate-800 md:col-span-2"
                onChange={(e) => set("bodyType", e.target.value)}
              />
              <input
                placeholder="–ü–æ–∂–µ–ª–∞–Ω–∏—è (–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ–∫/–≤–µ—Ä—Ö, —Ç–µ–º–ø–µ—Ä–∞—Ç., ADR –∏ –ø—Ä.)"
                className="p-3 border rounded-xl bg-white dark:bg-slate-800 md:col-span-3"
                onChange={(e) => set("notes", e.target.value)}
              />
            </div>
          )}
        </div>

        <button
          type="submit"
          disabled={loading}
          className={`w-full py-3 rounded-xl font-semibold text-white transition-all shadow ${
            loading ? "bg-gray-400 cursor-not-allowed" : "bg-gradient-to-r from-blue-600 to-sky-500 hover:from-blue-700 hover:to-sky-600"
          }`}
        >
          {loading ? <Loader2 className="animate-spin mx-auto w-5 h-5" /> : "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É"}
        </button>
      </form>
    </section>
  );
}

function TransportSelector({
  value,
  onChange,
}: {
  value: "auto" | "rail" | "air" | "sea" | "multimodal";
  onChange: (v: Transport) => void;
}) {
  const opts: { key: Transport; label: string; icon: JSX.Element }[] = [
    { key: "auto", label: "–ê–≤—Ç–æ", icon: <Truck className="w-4 h-4" /> },
    { key: "rail", label: "–ñ/–î", icon: <Train className="w-4 h-4" /> },
    { key: "air", label: "–ê–≤–∏–∞", icon: <Plane className="w-4 h-4" /> },
    { key: "sea", label: "–ú–æ—Ä–µ", icon: <Ship className="w-4 h-4" /> },
    { key: "multimodal", label: "–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª", icon: <LayersIcon /> },
  ];

  return (
    <div>
      <p className="text-sm font-semibold mb-2">–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞</p>
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-2">
        {opts.map((o) => (
          <button
            key={o.key}
            type="button"
            onClick={() => onChange(o.key)}
            className={`flex items-center justify-center gap-2 px-3 py-2 rounded-xl border transition ${
              value === o.key
                ? "bg-blue-600 text-white border-blue-600"
                : "bg-white dark:bg-slate-800 text-slate-700 dark:text-slate-200 border-slate-200 dark:border-slate-700 hover:border-blue-300"
            }`}
          >
            {o.icon}
            <span className="text-sm font-medium">{o.label}</span>
          </button>
        ))}
      </div>
    </div>
  );
}

function LayersIcon() {
  return (
    <svg viewBox="0 0 24 24" className="w-4 h-4" fill="none" stroke="currentColor" strokeWidth="2">
      <path d="m12 3 9 4.5L12 12 3 7.5 12 3Z" />
      <path d="M3 12l9 4.5L21 12" />
      <path d="M3 16.5 12 21l9-4.5" />
    </svg>
  );
}

function buildDescription(
  mode: Transport,
  f: {
    description: string;
    weightKg: string;
    volumeM3: string;
    lengthM: string;
    widthM: string;
    heightM: string;
    pickupDate: string;
    bodyType: string;
    notes: string;
  }
) {
  const lines: string[] = [];
  if (f.description) lines.push(f.description.trim());
  lines.push(`–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${mode}`);
  const dims = [f.lengthM, f.widthM, f.heightM].filter(Boolean).join("√ó");
  if (f.weightKg) lines.push(`–í–µ—Å: ${f.weightKg} –∫–≥`);
  if (f.volumeM3) lines.push(`–û–±—ä—ë–º: ${f.volumeM3} –º¬≥`);
  if (dims) lines.push(`–ì–∞–±–∞—Ä–∏—Ç—ã (–î√ó–®√ó–í): ${dims} –º`);
  if (f.bodyType) lines.push(`–¢–∏–ø –∫—É–∑–æ–≤–∞/–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${f.bodyType}`);
  if (f.pickupDate) lines.push(`–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: ${f.pickupDate}`);
  if (f.notes) lines.push(`–ü–æ–∂–µ–ª–∞–Ω–∏—è: ${f.notes}`);
  return lines.join("\n");
}
