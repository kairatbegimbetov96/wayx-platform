import {
  collection,
  addDoc,
  getDocs,
  getDoc,
  doc,
  updateDoc,
  onSnapshot,
  query,
  orderBy,
  serverTimestamp,
  where,
} from "firebase/firestore";
import { db } from "@/lib/firebase";

// === –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö ===
export interface Auction {
  id?: string;
  title: string;
  description: string;
  origin: string;
  destination: string;
  price: number;
  currency: string;
  createdBy: string;
  status: string; // "open" | "closed" | "in-progress"
  transport: "auto" | "rail" | "air" | "sea" | "multimodal";
  createdAt?: any;
}

export interface Bid {
  id?: string;
  user: string;
  amount: number;
  createdAt?: any;
  status?: "pending" | "accepted" | "rejected";
}

// === –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É (–∞—É–∫—Ü–∏–æ–Ω) ===
export async function createAuction(auction: Omit<Auction, "id">) {
  try {
    const ref = await addDoc(collection(db, "auctions"), {
      ...auction,
      status: auction.status || "open",
      createdAt: serverTimestamp(),
    });
    return ref.id;
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞:", err);
    throw err;
  }
}

// === –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞—É–∫—Ü–∏–æ–Ω—ã ===
export async function getAllAuctions(): Promise<Auction[]> {
  const q = query(collection(db, "auctions"), orderBy("createdAt", "desc"));
  const snap = await getDocs(q);
  return snap.docs.map((d) => ({ id: d.id, ...d.data() } as Auction));
}

// === –ü–æ–ª—É—á–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω –ø–æ ID ===
export async function getAuctionById(id: string): Promise<Auction | null> {
  const ref = doc(db, "auctions", id);
  const snap = await getDoc(ref);
  if (!snap.exists()) return null;
  return { id: snap.id, ...snap.data() } as Auction;
}

// === –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω–∞ ===
export async function updateAuction(id: string, data: Partial<Auction>) {
  try {
    await updateDoc(doc(db, "auctions", id), data);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞:", err);
  }
}

// === –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É ===
export async function addBid(auctionId: string, bid: Bid) {
  try {
    const bidsRef = collection(db, "auctions", auctionId, "bids");
    await addDoc(bidsRef, { ...bid, createdAt: serverTimestamp() });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏:", err);
  }
}

// === Live-–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞–≤–∫–∏ ===
export function listenToBids(
  auctionId: string,
  callback: (bids: Bid[]) => void
) {
  const bidsRef = collection(db, "auctions", auctionId, "bids");
  const q = query(bidsRef, orderBy("createdAt", "desc"));
  return onSnapshot(q, (snap) => {
    const data = snap.docs.map((d) => ({ id: d.id, ...d.data() } as Bid));
    callback(data);
  });
}

// === –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏ ===
export async function updateBidStatus(
  auctionId: string,
  bidId: string,
  status: "pending" | "accepted" | "rejected"
) {
  try {
    const bidRef = doc(db, "auctions", auctionId, "bids", bidId);
    await updateDoc(bidRef, { status });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞–≤–∫–∏:", err);
  }
}

// === ‚úÖ –ü—Ä–∏–Ω—è—Ç—å –æ–¥–Ω—É —Å—Ç–∞–≤–∫—É (—Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞) ===
export async function acceptBid(auctionId: string, acceptedBidId: string) {
  try {
    const bidRef = doc(db, "auctions", auctionId, "bids", acceptedBidId);
    await updateDoc(bidRef, { status: "accepted" });
    console.log("‚úÖ –°—Ç–∞–≤–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç–∞");

    // üîπ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É–∫—Ü–∏–æ–Ω–∞ –Ω–∞ "in-progress"
    await updateDoc(doc(db, "auctions", auctionId), { status: "in-progress" });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å—Ç–∞–≤–∫–∏:", err);
  }
}

// === ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ (–ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞) ===
export async function rejectOtherBids(auctionId: string) {
  try {
    const bidsRef = collection(db, "auctions", auctionId, "bids");
    const q = query(
      bidsRef,
      where("status", "in", ["pending", "accepted"])
    );
    const snap = await getDocs(q);

    const updates = snap.docs.map(async (d) => {
      const ref = doc(db, "auctions", auctionId, "bids", d.id);
      const status = d.data().status === "accepted" ? "accepted" : "rejected";
      await updateDoc(ref, { status });
    });

    await Promise.all(updates);
    console.log("‚öôÔ∏è –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã (–∫—Ä–æ–º–µ –ø—Ä–∏–Ω—è—Ç–æ–π)");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Å—Ç–∞–≤–æ–∫:", err);
  }
}

// === üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω ===
export async function closeAuction(auctionId: string) {
  try {
    const ref = doc(db, "auctions", auctionId);
    await updateDoc(ref, { status: "closed" });
    console.log("‚úÖ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω –≤—Ä—É—á–Ω—É—é");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞:", err);
  }
}
