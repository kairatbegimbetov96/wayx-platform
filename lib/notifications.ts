import {
  collection,
  addDoc,
  query,
  orderBy,
  onSnapshot,
  serverTimestamp,
  updateDoc,
  doc,
  getDocs,
  where,
} from "firebase/firestore";
import { db } from "@/lib/firebase";

// === –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===
export interface Notification {
  id?: string;
  title: string;
  message: string;
  type: "success" | "info" | "warning" | "error";
  link?: string;
  read?: boolean;
  createdAt?: any;
}

// === üîî –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ===
export async function createNotification(userId: string, data: Notification) {
  if (!userId) return console.warn("‚ö†Ô∏è createNotification: userId –Ω–µ —É–∫–∞–∑–∞–Ω");

  try {
    const ref = collection(db, "notifications", userId, "items");
    await addDoc(ref, {
      ...data,
      read: false,
      createdAt: serverTimestamp(),
    });
    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è ${userId}`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", err);
  }
}

// === üëÇ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (real-time) ===
export function listenToNotifications(
  userId: string,
  callback: (items: Notification[]) => void
) {
  if (!userId) return () => {};

  const ref = collection(db, "notifications", userId, "items");
  const q = query(ref, orderBy("createdAt", "desc"));

  return onSnapshot(
    q,
    (snap) => {
      const data = snap.docs.map((d) => ({ id: d.id, ...d.data() } as Notification));
      callback(data);
    },
    (err) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", err);
    }
  );
}

// === ‚úÖ –ü–æ–º–µ—Ç–∏—Ç—å –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ ===
export async function markNotificationRead(userId: string, notifId: string) {
  if (!userId || !notifId) return;
  try {
    const ref = doc(db, "notifications", userId, "items", notifId);
    await updateDoc(ref, { read: true });
    console.log(`üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notifId} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", err);
  }
}

// === ‚úÖ –ü–æ–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ ===
export async function markAllNotificationsRead(userId: string) {
  if (!userId) return;
  try {
    const ref = collection(db, "notifications", userId, "items");
    const q = query(ref, where("read", "==", false));
    const snap = await getDocs(q);

    const updates = snap.docs.map(async (d) => {
      const docRef = doc(db, "notifications", userId, "items", d.id);
      await updateDoc(docRef, { read: true });
    });

    await Promise.all(updates);
    console.log(`üì® –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${userId} –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", err);
  }
}
